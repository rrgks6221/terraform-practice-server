# 버전은 현재, 0.2가 권장사항입니다.
version: 0.2

# 빌드 단계별로 원하는 명령을 입력합니다.
phases:
  install:
    runtime-versions:
      docker: 18 # Use a valid Docker runtime version
  # 빌드 전에 수행할 명령을 입력합니다.
  pre_build:
    commands:
      # application environment variables inject
      - PORT=$PORT
      - DATABASE_TYPE=$DATABASE_TYPE
      - DATABASE_HOST=$DATABASE_HOST
      - DATABASE_PORT=$DATABASE_PORT
      - DATABASE_SCHEMA=$DATABASE_SCHEMA
      - DATABASE_USERNAME=$DATABASE_USERNAME
      - DATABASE_PASSWORD=$DATABASE_PASSWORD
      - DATABASE_DATABASE=$DATABASE_DATABASE

      # code build environment variables inject
      - REPOSITORY_URI=$REPOSITORY_URI
      - PROJECT_NAME=$PROJECT_NAME
      - REGION=$REGION
      - DOCKER_ID=$DOCKER_ID
      - DOCKER_PASSWORD=$DOCKER_PASSWORD

      # ecr login
      - echo login to Amazon ECR
      - aws --version
      - aws ecr get-login-password --region $REGION | docker login --username DOCKER_ID --password-stdin $DOCKER_PASSWORD

      # tagging
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
  # 빌드를 수행할 명령을 입력합니다.
  build:
    commands:
      - echo Build Phase >> Build started on `date`
      # create .env
      - echo rm -rf .env
      - touch .env
      - echo PORT=$PORT >> .env
      - echo DATABASE_TYPE=$DATABASE_TYPE >> .env
      - echo DATABASE_HOST=$DATABASE_HOST >> .env
      - echo DATABASE_PORT=$DATABASE_PORT >> .env
      - echo DATABASE_SCHEMA=$DATABASE_SCHEMA >> .env
      - echo DATABASE_USERNAME=$DATABASE_USERNAME >> .env
      - echo DATABASE_PASSWORD=$DATABASE_PASSWORD >> .env
      - echo DATABASE_DATABASE=$DATABASE_DATABASE >> .env
      - cat .env

      - echo $REPOSITORY_URI
      - echo $PROJECT_NAME
      - echo $REGION

      # image build
      - docker build -t $REPOSITORY_URI/$PROJECT_NAME:latest .
      - docker tag $REPOSITORY_URI/$PROJECT_NAME:latest $REPOSITORY_URI/$PROJECT_NAME:$IMAGE_TAG
      - echo docker images
  # 빌드 후에 수행할 명령을 입력합니다.
  post_build:
    commands:
      # image push at ecr
      - docker push $REPOSITORY_URI/$PROJECT_NAME:latest
      - docker push $REPOSITORY_URI/$PROJECT_NAME:$IMAGE_TAG

      # Writing image definitions file...
      - printf '{"ImageURI":"%s"}' $REPOSITORY_URI/PROJECT_NAME:$IMAGE_TAG > imageDetail.json
# artifacts 저장
artifacts:
  files: imageDetail.json
